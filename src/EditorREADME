Create a location:

[room]
{
    ID: <ROOMID>;                            - Unique ID
    N: <NORTHID>;                            - Location to the north (optional)
    NCOND: _flag1[=int]?, ..., _flagn[=int]? - All conditions must be met to move north (optional)
    S: <SOUTHID>;                            - Location to the south (optional)
    SCOND: _flag1[=int]?, ..., _flagn[=int]? - All conditions must be met to move south (optional)
    E: <EASTID>;                             - Location to the east (optional)
    ECOND: _flag1[=int]?, ..., _flagn[=int]? - All conditions must be met to move east (optional)
    W: <WESTID>;                             - Location to the west (optional)
    WCOND: _flag1[=int]?, ..., _flagn[=int]? - All conditions must be met to move west (optional)
    U: <UPID>;                               - Location above (optional)
    UCOND: _flag1[=int]?, ..., _flagn[=int]? - All conditions must be met to move up (optional)
    D: <DOWNID>;                             - Location below (optional)
    DCOND: _flag1[=int]?, ..., _flagn[=int]? - All conditions must be met to move down (optional)
    NAME: "text-name";                       - Display name of the room
    DESC: "text-desc";                       - Room description shown when entering room or looking around (optional)
    SYNS: "text-syn1", ..., "text-synn";     - List of synonyms for the room (optional)
}

----------------------------------------------------------------------------------------------------------------

Create an object:

[object]
{
    ID: <OBJECTID>;                                                - Unique ID
    LOC: <LOCID>;                                                  - Location of the object
    NAME: "text-name";                                             - Display name of the object
    DESC: "text-desc";                                             - Object description for when it's inspected (optional)
    SYNS: "text-syn1", ..., "text-synn";                           - List of synonyms for the object (optional)
    FLAGS: _flag1, ..., _flagn;                                    - Bit flags (tags) for this object (optional)
    VALUES: (var1: num/string/bool), ..., (varn: num/string/bool); - Variables only accessible within this object (optional)
}

----------------------------------------------------------------------------------------------------------------

Create a global flag:

[flag]
{
    FLAG: _FLAG; - Unique flag name
    VALUE: int;  - Initial value (optional - default 0)
}

----------------------------------------------------------------------------------------------------------------

Create an object action:

[action]
{
    ID: <OBJECTID>;    - ID of the object this action is associated with
    ACTION: [ACTIONS]; - Action block for this object (see below)
}

----------------------------------------------------------------------------------------------------------------

ACTIONS:

 - An ACTION block is a list of at least one CONDITIONAL, or EFFECT.
 - A CONDITIONAL has a set of PRE-CONDITIONS that must be met for its nested ACTION block to be entered.
 - If a CONDITIONAL's nested ACTION block is entered, then every action after the CONDITIONAL is ignored.
 - An EFFECT has an impact on the state of the game.
 - EFFECT's one after another are chained, but EFFECT's after a taken CONDITIONAL are ignored.



 CONDITIONAL:

 COND<PRE-CONDITIONS>
 {
    [ACTIONS]
 }
 [ACTIONS] (ignored if nested ACTION block is taken)



 PRE-CONDITIONS:

 - PRE-CONDITIONS can be ANDed together with 'PRE-CONDTION && PRE-CONDITIONS' (if ANDing, do not OR)
 - PRE-CONDITIONS can be ORed together with 'PRE-CONDITION || PRE-CONDITIONS' (if ORing, do not AND)
 - PRE-CONDITIONS can be NOTed with '!PRE-CONDITION'

 PRSA: VERB1, ..., VERBn                  - True if the input's verb is listed
 PRSO: <OBJECTID1>, ..., <OBJECTIDn>      - True if the input's direct object is listed
 PRSI: <OBJECTID1>, ..., <OBJECTIDn>      - True if the input's indirect object is listed
 ANDFLAGS: _FLAG1, ..., _FLAGn            - True if all of the listed global flags are set (value > 0)
 ORFLAGS: _FLAG1, ..., _FLAGn             - True if at least one of the listed global flags is set (value > 0)
 FLAGVALUE: _FLAG, int                    - True if the given flag has the given value
 HAVEITEM: <OBJECTID1>, ..., <OBJECTIDn>  - True if player has at least one of the listed objects
 HAVEITEMS: <OBJECTID1>, ..., <OBJECTIDn> - True if player has all listed objects
 EQUALS: var, num/string/bool             - True if this objects variable var is equal to given value
 EQUALS: var1, var2                       - True if both variables have equal values
 GT: var, num/string/bool                 - True if variable var has a greater value than the given value
 GT: var1, var2                           - True if var1 is greater than var2
 LT: var, num/string/bool                 - True if variable var has a lesser value than the given value
 LT: var1, var2                           - True if var1 is less than var2



 EFFECT:

 EFF<STATE-CHANGE>
 [ACTIONS]



 STATE-CHANGES:

 TELL: "text"                - Display text
 GOTO: <ROOMID>              - Teleport to desired room
 SETFLAG: _FLAG              - Set flag to 1
 SETFLAG: _FLAG, int         - Set flag to desired value
 REMFLAG: _FLAG              - Set flag to 0
 TAKE: <OBJECTID>            - Put the object into the player's inventory
 PLACE: <OBJECTID>, <ROOMID> - Place the given object in the desired room (Use <HERE> as room id to place in current location)
 SET: var, num/string/bool   - Update a variable for this object

----------------------------------------------------------------------------------------------------------------

Important GameObject flags:

 - _TAKEABLE - signifies that the GameObject can be taken by the player
 - _ISWEAPON - the GameObject is a weapon
 - _ISAGENT  - the GameObject is an agent (NPC)

Important GameObject variables:

 - volume - Amount of space this object takes up (default 1)
 - capacity - How much volume can be stored inside game object (default 0)
 - surface - How much volume can be placed on top of the object (default 0)
 - below - How much volume can be placed below the object (default 0)